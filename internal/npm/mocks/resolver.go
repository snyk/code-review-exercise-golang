// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/resolver.go -source=resolver.go -package mocksnpm
//

// Package mocksnpm is a generated GoMock package.
package mocksnpm

import (
	context "context"
	reflect "reflect"

	npm "github.com/snyk/npmjs-deps-fetcher/internal/npm"
	gomock "go.uber.org/mock/gomock"
)

// MockPackageFetcher is a mock of PackageFetcher interface.
type MockPackageFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockPackageFetcherMockRecorder
	isgomock struct{}
}

// MockPackageFetcherMockRecorder is the mock recorder for MockPackageFetcher.
type MockPackageFetcherMockRecorder struct {
	mock *MockPackageFetcher
}

// NewMockPackageFetcher creates a new mock instance.
func NewMockPackageFetcher(ctrl *gomock.Controller) *MockPackageFetcher {
	mock := &MockPackageFetcher{ctrl: ctrl}
	mock.recorder = &MockPackageFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageFetcher) EXPECT() *MockPackageFetcherMockRecorder {
	return m.recorder
}

// FetchPackage mocks base method.
func (m *MockPackageFetcher) FetchPackage(ctx context.Context, name, version string) (*npm.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPackage", ctx, name, version)
	ret0, _ := ret[0].(*npm.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPackage indicates an expected call of FetchPackage.
func (mr *MockPackageFetcherMockRecorder) FetchPackage(ctx, name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPackage", reflect.TypeOf((*MockPackageFetcher)(nil).FetchPackage), ctx, name, version)
}

// FetchPackageMeta mocks base method.
func (m *MockPackageFetcher) FetchPackageMeta(ctx context.Context, name string) (*npm.PackageMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPackageMeta", ctx, name)
	ret0, _ := ret[0].(*npm.PackageMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPackageMeta indicates an expected call of FetchPackageMeta.
func (mr *MockPackageFetcherMockRecorder) FetchPackageMeta(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPackageMeta", reflect.TypeOf((*MockPackageFetcher)(nil).FetchPackageMeta), ctx, name)
}
